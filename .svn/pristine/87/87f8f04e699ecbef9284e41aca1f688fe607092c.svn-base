# -*- encoding : utf-8 -*-
class Address < ActiveRecord::Base
  belongs_to :direction
  has_one :user

  attr_protected

  validate :address_before_save
  before_save do
    self.email = nil if email.blank?
  end

  def address_before_save
    email = self.email.to_s
    email_not_empty = email.present?

    if email_not_empty && !Email.address_validation(email)
      errors.add(:email, _('Please_enter_correct_email'))
      return false
    end

    if email_not_empty
      dublicate, dublicate_email = no_dublicate_emails
        unless dublicate
          errors.add(:email, _('Email_space') + dublicate_email + _('Is_already_used'))
        return false
      end
    end
  end

  def no_dublicate_emails
    not_self = "AND id != '#{self.id}'" if id.present?
    addresses_all = Address.where("email != 'null' #{not_self}").pluck(:email)
    manager_all = User.where(usertype: 'manager').pluck(:main_email)
    emails = email.split(';').reject(&:blank?)

    addressses = []
    addresses_all.each do |address|
      addressses << address.downcase.split(';').reject(&:blank?)
    end

    manager_all.each do |email|
      addressses << email.downcase.split(';').reject(&:blank?)
    end if manager_all.present?

    splitted_emails = addressses.flatten.collect(&:strip)
    emails.each do |mail|
      mail.gsub!(/\s+/, '')
      return false, mail if splitted_emails.include?(mail.downcase)
    end
  end

  def self.assign_imported_address(r_arr, session)
    address = Address.new
    address.direction_id = Direction.get_direction_by_country(address.clean_value_all(r_arr[session[:imp_user_country]]))
    address.state = address.clean_value_all r_arr[session[:imp_user_state]] if session[:imp_user_state] >= 0
    address.county = address.clean_value_all r_arr[session[:imp_user_country]]
    address.city = address.clean_value_all r_arr[session[:imp_user_city]] if session[:imp_user_city] >= 0
    address.postcode = address.clean_value_all r_arr[session[:imp_user_postcode]] if session[:imp_user_postcode] >= 0
    address.address = address.clean_value_all r_arr[session[:imp_user_address]] if session[:imp_user_address] >= 0
    address.phone = address.clean_value_all r_arr[session[:imp_user_phone]] if session[:imp_user_phone] >= 0
    address.mob_phone = address.clean_value_all r_arr[session[:imp_user_mob_phone]] if session[:imp_user_mob_phone] >= 0
    address.fax = address.clean_value_all r_arr[session[:imp_user_fax]] if session[:imp_user_fax] >= 0
    address.email = (address.clean_value_all r_arr[session[:imp_user_email]]).strip
    address.email = nil if address.email.to_s.blank?
    address
  end

  def clean_value_all(value)
    cv = value.to_s
    while cv[0, 1] == "\"" or cv[0] == "'" do
      cv = cv[1..cv.length]
    end
    while cv[cv.length - 1, 1] == "\"" or cv[cv.length - 1, 1] == "'" do
      cv = cv[0..cv.length - 2]
    end
    cv
  end
end
