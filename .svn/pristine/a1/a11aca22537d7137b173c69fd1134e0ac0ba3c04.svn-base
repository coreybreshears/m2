<tr>
  <td class="bottom_border">
    <b><%= _('General') %></b>
  </td>
</tr>
<tr>
  <td height="10"></td>
</tr>
<tr>
<td valign="top">
<table class="simple">
<% if not new_device %>
    <% if default.to_i != 1 %>
        <tr>
          <td id="device_accountcode_name"> <%= _('Accountcode') %>:</td>
          <td id="device_accountcode_value"><%= device.accountcode if device %> </td>
        </tr>
    <% end %>
<% end %>
  <% if new_device %>
      <tr>
        <td id="device_description_name"><%= _('Description') %>:</td>
        <td id="device_description_value">
          <%= text_field 'device', 'description',
                         "class" => "input",
                         value: params[:device].try(:[], :description).to_s, size: 51 %>
        </td>
      </tr>
      <tr id='ip_add_name'>
        <td id="ip_add_name"><%= _('IP_Address') %>:</td>
        <td id="ip_add_value_ip">
          <%= text_field 'device', 'ipaddr',
                         "class" => "input",
                         value: params[:device].try(:[], :ipaddr).to_s %>
        </td>
      </tr>
  <% elsif default.to_i != 1 %>
      <tr>
        <td id="device_description_name"><%= _('Description') %>:</td>
        <td id="device_description_value"><%= text_field 'device', 'description', "class" => "input", size: 51 %></td>
      </tr>
  <% end %>

<% if not new_device %>
    <% if device_type != "Virtual" %>
        <%
           if device
             timeout = device[:timeout].to_i
             max_timeout = device.max_timeout.to_i
             progress_timeout = device.progress_timeout
           else
             timeout = Confline.get_value("Default_device_timeout", session[:user_id]).to_i
             max_timeout = Confline.get_value("Default_device_max_timeout", session[:user_id]).to_i
             progress_timeout = Confline.get_value("Default_device_progress_timeout", session[:user_id]).to_i
           end %>
        <tr class='tp_setting'>
          <td> <%= _('Progress_Timeout') %>:</td>
          <td><%= text_field_tag 'device[progress_timeout]', progress_timeout, "class" => "input", :size => "5", :maxlength => "4" %> <%= _('seconds') %> </td>
        </tr>
        <tr>
          <td> <%= _('Ringing_Timeout') %>:</td>
          <td><%= text_field_tag 'device_timeout', timeout, "class" => "input", :size => "5", :maxlength => "4" %> <%= _('seconds') %> </td>
        </tr>
        <tr <%= tooltip(_('Call_Timeout'), _('Call_Timeout_Explanation')) %> >
          <td> <%= _('Call_Timeout') %>:</td>
          <td><%= text_field_tag 'device[max_timeout]', max_timeout, "class" => "input", :size => "5", :maxlength => "4" %> <%= _('seconds') %> </td>
        </tr>
    <% end %>

    <!-- Servers -->
    <% if ((default == 1) || (default != 1 && !proxy_server_active? && !single_fs_server_active?)) %>
      <tr>
        <td height="20"></td>
      </tr>
      <tr>
        <td class="bottom_border" colspan=2>
          <b><%= _('Servers') %></b>
        </td>
      </tr>
      <tr>
        <td height="10"></td>
      </tr>
      <tr>
        <td colspan="2">
          <table width="54%">
            <% servers.each do |server| %>
                <tr>
                <% if server.server_fs? || server_devices[server.id].to_i == 1 %>
                  <td><%= nice_server(server) %></td>
                  <td>
                    <%= hidden_field_tag "add_to_servers[#{server.id}]", 0,
                        id: 'add_to_servers_hidden_field' %>
                    <%= check_box_tag "add_to_servers[#{server.id}]", 1,
                        server_devices[server.id].to_i == 1 && server.active?,
                        disabled: !server.active? %>
                  </td>
                <% end %>
                </tr>
            <% end %>
          </table>
        </td>
      </tr>
    <% end %>

<% end %>

</table>

</td>
</tr>

<% if ccl_active? %>
    <script type="text/javascript">
        //<![CDATA[
        function qualify_change(dyncheck_checked) {
            var qualify_row1 = document.getElementById('qualify_row1');
            var qualify_row2 = document.getElementById('qualify_row2');
            if (dyncheck_checked) {
                <% if ccl_active? and device_type == "SIP" %>
                    qualify_row1.hide();
                    qualify_row2.show();
                <% else %>
                    qualify_row1.show();
                    qualify_row2.hide();
                <% end %>
            } else {
                qualify_row1.show();
                qualify_row2.hide();
            }
        }
        //]]>
    </script>
<% end %>

<% if ccl_active? and !sip_proxy_server.blank? and params[:action] == "default_device" %>
    <script type="text/javascript">

        function emptyList(servers) {
            servers.options.length=0;
        }

        function fillList(servers, list) {
            if (list == 2) {
                <% servers = Server.where("server_type = 'sip_proxy'").limit(1).all %>
                var i = 0;
                <% for ser in servers %>
                    servers.options[i]= new Option("ID: <%= ser.id %>, IP: <%= ser.server_ip %> (<%= ser.comment %>)", <%= ser.id %>, true, true);
                    i++;
                <% end %>
            } else {
                <% servers = Server.where("server_type = 'asterisk'").order("id ASC").all %>
                <% device_server = servers[0].id if sip_proxy_server[0] and sip_proxy_server[0].id == device_server.to_i %>
                var i = 0;
                <% for ser in servers %>
                    servers.options[i]= new Option("ID: <%= ser.id %>, IP: <%= ser.server_ip %> (<%= ser.comment %>)", <%= ser.id %>, <%= device_server.to_i == ser.id.to_i ? 'true' : 'false' %>, <%= device_server.to_i == ser.id.to_i ? 'true' : 'false' %>);
                    i++;
                <% end %>
            }
        }


        function change_servers_if_necesary(type_checked, type_value) {
            /*if some other than SIP device type was selected, then show all asterisk servers*/
            var servers = $('device_server_id');
            if (type_checked) {
                var check = servers.disabled;
                var enable = (type_value == 'SIP');
                servers.disabled = enable;
                if (check != servers.disabled) {
                    if (enable) {             // for sip_proxy server
                        var list_2 = 2;
                        emptyList(servers);
                        fillList(servers, list_2)
                        qualify_change(true);
                    } else {                  // for asterisk servers
                        var list_1 = 1;
                        emptyList(servers);
                        fillList(servers, list_1)
                        qualify_change(false);
                    }
                }
            }
        }

        /*add event listener for onload event and for onclick event for all device
         type checkboxes.*/

        Event.observe(window, 'load', function () {
            var device_types = document.getElementsByName('device[device_type]');
            var type;

            for (var i = 0; i < device_types.length; i++) {
                type = device_types[i]
                if (type.checked) {
                    if (type.value == 'SIP') {
                      qualify_change(true);
                    } else {
                      qualify_change(false);
                    }
                    change_servers_if_necesary(type.checked, type.value)
                }
                Event.observe(type, 'click', function (e) {
                    type = e.findElement();
                    change_servers_if_necesary(type.checked, type.value);
                })
            }
        })

    </script>
<% end %>

<% if session[:usertype] == "reseller" %>
    <script type="text/javascript">
        Event.observe(window, 'load', function () {
          <% if !ccl_active? %>
            var servers_dropdown = document.getElementById('servers_dropdown');
            servers_dropdown.hide();
          <% else %>
            var servers_checkbox_title = document.getElementById('servers_checkbox_title');
            servers_checkbox_title.hide();
            var servers_checkboxes = document.getElementById('servers_checkboxes');
            servers_checkboxes.hide();
          <% end %>
        })
    </script>
<% end %>

